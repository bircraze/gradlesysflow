project.ext {
    prop = { p ->
        return properties[p] ? properties[p] : ""
    }
    replaceMap = { srcMap, replaceKey, inMap ->
        // println "inMap" + inMap
        def index = srcMap.findIndexOf{it.key == replaceKey}
        def preMap = [:]
        def postMap = [:]
        srcMap.eachWithIndex { entry, i ->
            if (i < index) {
                preMap << entry
            } else if (i > index) {
                postMap << entry
            }
        }
        return preMap + inMap + postMap
    }
    deepcopy = { orig -> 
        def bos = new ByteArrayOutputStream()  
        def oos = new ObjectOutputStream(bos)  
        oos.writeObject(orig); oos.flush()  
        def bin = new ByteArrayInputStream(bos.toByteArray())  
        def ois = new ObjectInputStream(bin)  
        return ois.readObject()  
    }

    tpl_example = [
        alias: "mybuild",
        applyfor: /.*(latest).*/,
        steps: [
            sysclean: [
                rootonly: true,
                cmd: "echo",
                subcmd: "",
                args: ["hi", "hi2"]
            ],
            reset: [
                parallel: true,
                subprjs: subPrjs,
                cmd: "git",
                subcmd: "reset",
                args: ["--hard"]
            ],
            checkout: [
                parallel: true,
                cmd: "git",
                subcmd: "checkout",
                args: [":::tag:::"],
                tag: ["master": subPrjs]
            ],
            hook: [
                rootonly: true
            ],
            mytest: [
                parallel: true,
                cmd: "gradle",
                subcmd: "myTask",
                args: ["-Pdummy=${prop('dummy')}", "-Pver=:::ver:::", "-Petc=:::etc:::"],
                ver: ["v9999": subPrjs],
                etc: ["brabrabra": subPrjs]
            ]
        ]
    ]
}
