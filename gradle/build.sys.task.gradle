project.ext {
    commomAction = {
        preExecCmd(projectDir, name)
    }
}

subprojects {
    task execRootCmd {
        doLast {
            if (!project.ext.subs.contains(project.name)) {
                println "Ignored: " + project.name
                return
            }

            def argsArr = project.ext.args.split(",")
            def newArgsArr = [project.ext.subcmd]
            argsArr.each {
                if (it.split(":::")[1] == project.name) {
                    newArgsArr << it.split(":::")[0]
                }
                
            }
            execCmd(project.ext.cmd, newArgsArr, projectDir)
        }
    }
}

def genArgs(taskName, subs) {
    def argsArr = project.ext.envMap["steps"][taskName]["args"]
    def newArgsArr = []
    argsArr.each { arg ->
        if (arg.contains(":::")) {
            def pName = arg.split(":::")[1]
            project.ext.envMap["steps"][taskName][pName].each { p ->
                def newArg = arg.replace(":::${pName}:::", p.key)
                p.value.each { sub -> 
                    newArgsArr << "${newArg}:::${sub}"
                }
            }
        } else {
            subs.each { sub ->
                newArgsArr << "${arg}:::${sub}"
            }
        }
    }
    def result = newArgsArr ? newArgsArr.inject("") { x, y -> x + "," + y }.substring(1) : ""

    return result
}

def genSubs(taskName) {
    def argsArr = project.ext.envMap["steps"][taskName]["args"]
    argsArr = argsArr.findAll {
        it.contains(":::")
    }
    if (!argsArr) {
        return project.ext.envMap["parties"].inject("") { x, y -> x + "," + y }.substring(1)
    }

    def newParties = []
    argsArr.each {
        def pName = it.split(":::")[1]
        newParties = project.ext.envMap["steps"][taskName][pName].values().inject([]) {x, y -> x + y}
    }
    def result = newParties ? newParties.inject("") { x, y -> x + "," + y }.substring(1) : ""

    return result
}

def execCmd(cmd, argus, wdir) {
    println "===================================="
    println "Run cmd: ${cmd}, args: ${argus}, destDir: ${wdir}"
    project.exec {
        commandLine cmd
        //commandLine "git", "fetch"
        args argus
        //args "origin"
        workingDir wdir
    }
    println "===================================="
}

def preExecCmd(wdir, taskName) {
    def argsArr = []
    def envCmd = project.ext.envMap["steps"][taskName]["cmd"]
    def envSubCmd = project.ext.envMap["steps"][taskName]["subcmd"]
    def subs = genSubs(taskName)
    argsArr << "execRootCmd"
    argsArr << "-Psubs=${subs}"
    argsArr << "-Pcmd=${envCmd}"
    argsArr << "-Psubcmd=${envSubCmd}"
    argsArr << "-Pargs=${genArgs(taskName, subs.split(','))}"
    
    def stepMap = project.ext.envMap["steps"][taskName]
    if (usingParallel && stepMap["parallel"] != null && stepMap["parallel"]) {
        execCmd("gradle", argsArr << "--parallel", wdir)
    } else {
        execCmd("gradle", argsArr, wdir)
    }
}

